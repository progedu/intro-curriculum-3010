'use strict';
//{ name: タスクの文字列, state:　完了してるかどうかの真偽値}
//const tasks = new Array();
let tasks = new Array();

const fs = require('fs');
const fileName = './tasks.json';


//同期的にファイルから復元
try {
    const data = fs.readFileSync(fileName, 'utf8');
    tasks = JSON.parse(data);
  } catch (ignore) {
    console.log(fileName + 'から復元できませんでした');
  }


/**
 * タスクをファイルに保存する
 */
function saveTasks(){
    fs.writeFileSync(fileName, JSON.stringify(tasks), 'utf8');
}

/**
 * TODOを追加する
 * @param {string} task
 */
function todo(task) {
    tasks.push({ name: task, state: false });
    saveTasks();
}

/**
 * タスクと完了したかどうかが含まれるobjを受け取り、
 * 完了したかどうかを返す
 * @param {object} taskAndIsDonePair
 * @return {boolean} 完了したかどうか
 *  
 */
function isDone(taskAndIsDonePair){
    return taskAndIsDonePair.state;
}

/**
 * {task,完了かどうか}のobjを受け取り、完了したかどうかを返す
 * @param {object} taskAndIsDonePair
 * @return {boolean} 完了してないかどうか
 */
function isNotDone(taskAndIsDonePair){
    return !isDone(taskAndIsDonePair);
}

/**
 * TODOの一覧の配列を取得する
 * @return {array}
 */
function list() {
    return tasks
        .filter(isNotDone)
        .map(item => item.name);
}

/**
 * TODOを完了状態にする
 * @param {string} task
 */
function done(task){
    const indexFound = tasks
        .findIndex(item => item.name === task);
    if(indexFound != -1){
        tasks[indexFound].state = true;
        saveTasks();
    }
}

/**
 * 完了済みのタスク一覧の配列を取得する
 * @return {array}
 */
function donelist(){
    return tasks
        .filter(isDone)
        .map(item => item.name);
}

/**
 * タスクを削除する
 * @param {string} task 
 */

function del(task){
    const indexFound = tasks
        .findIndex(item => item.name === task);
    if(indexFound != -1){
        delete tasks[indexFound];
        saveTasks();
    }
}


module.exports = { 
    todo,
    list,
    done,
    donelist,
    del
};
